// /*
// Copyright 2025 Flant JSC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by MockGen. DO NOT EDIT.
// Source: file.go
//
// Generated by this command:
//
//	mockgen -typed -package mock -copyright_file ../hack/boilerplate.txt -write_source_comment -destination=mock/file.go -source=file.go
//

// Package mock is a generated GoMock package.
package mock

import (
	fs0 "io/fs"
	reflect "reflect"

	fs "github.com/deckhouse/sds-common-lib/fs"
	gomock "go.uber.org/mock/gomock"
)

// MockFileSizer is a mock of FileSizer interface.
type MockFileSizer struct {
	ctrl     *gomock.Controller
	recorder *MockFileSizerMockRecorder
	isgomock struct{}
}

// MockFileSizerMockRecorder is the mock recorder for MockFileSizer.
type MockFileSizerMockRecorder struct {
	mock *MockFileSizer
}

// NewMockFileSizer creates a new mock instance.
func NewMockFileSizer(ctrl *gomock.Controller) *MockFileSizer {
	mock := &MockFileSizer{ctrl: ctrl}
	mock.recorder = &MockFileSizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSizer) EXPECT() *MockFileSizerMockRecorder {
	return m.recorder
}

// Size mocks base method.
func (m *MockFileSizer) Size() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockFileSizerMockRecorder) Size() *MockFileSizerSizeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockFileSizer)(nil).Size))
	return &MockFileSizerSizeCall{Call: call}
}

// MockFileSizerSizeCall wrap *gomock.Call
type MockFileSizerSizeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSizerSizeCall) Return(arg0 int64) *MockFileSizerSizeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSizerSizeCall) Do(f func() int64) *MockFileSizerSizeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSizerSizeCall) DoAndReturn(f func() int64) *MockFileSizerSizeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFileOpener is a mock of FileOpener interface.
type MockFileOpener struct {
	ctrl     *gomock.Controller
	recorder *MockFileOpenerMockRecorder
	isgomock struct{}
}

// MockFileOpenerMockRecorder is the mock recorder for MockFileOpener.
type MockFileOpenerMockRecorder struct {
	mock *MockFileOpener
}

// NewMockFileOpener creates a new mock instance.
func NewMockFileOpener(ctrl *gomock.Controller) *MockFileOpener {
	mock := &MockFileOpener{ctrl: ctrl}
	mock.recorder = &MockFileOpenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileOpener) EXPECT() *MockFileOpenerMockRecorder {
	return m.recorder
}

// OpenFile mocks base method.
func (m *MockFileOpener) OpenFile(flag int, perm fs.FileMode) (fs.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", flag, perm)
	ret0, _ := ret[0].(fs.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockFileOpenerMockRecorder) OpenFile(flag, perm any) *MockFileOpenerOpenFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFileOpener)(nil).OpenFile), flag, perm)
	return &MockFileOpenerOpenFileCall{Call: call}
}

// MockFileOpenerOpenFileCall wrap *gomock.Call
type MockFileOpenerOpenFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileOpenerOpenFileCall) Return(arg0 fs.File, arg1 error) *MockFileOpenerOpenFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileOpenerOpenFileCall) Do(f func(int, fs.FileMode) (fs.File, error)) *MockFileOpenerOpenFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileOpenerOpenFileCall) DoAndReturn(f func(int, fs.FileMode) (fs.File, error)) *MockFileOpenerOpenFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDirReader is a mock of DirReader interface.
type MockDirReader struct {
	ctrl     *gomock.Controller
	recorder *MockDirReaderMockRecorder
	isgomock struct{}
}

// MockDirReaderMockRecorder is the mock recorder for MockDirReader.
type MockDirReaderMockRecorder struct {
	mock *MockDirReader
}

// NewMockDirReader creates a new mock instance.
func NewMockDirReader(ctrl *gomock.Controller) *MockDirReader {
	mock := &MockDirReader{ctrl: ctrl}
	mock.recorder = &MockDirReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirReader) EXPECT() *MockDirReaderMockRecorder {
	return m.recorder
}

// ReadDir mocks base method.
func (m *MockDirReader) ReadDir(n int) ([]fs.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", n)
	ret0, _ := ret[0].([]fs.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockDirReaderMockRecorder) ReadDir(n any) *MockDirReaderReadDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockDirReader)(nil).ReadDir), n)
	return &MockDirReaderReadDirCall{Call: call}
}

// MockDirReaderReadDirCall wrap *gomock.Call
type MockDirReaderReadDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDirReaderReadDirCall) Return(arg0 []fs.DirEntry, arg1 error) *MockDirReaderReadDirCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDirReaderReadDirCall) Do(f func(int) ([]fs.DirEntry, error)) *MockDirReaderReadDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDirReaderReadDirCall) DoAndReturn(f func(int) ([]fs.DirEntry, error)) *MockDirReaderReadDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLinkReader is a mock of LinkReader interface.
type MockLinkReader struct {
	ctrl     *gomock.Controller
	recorder *MockLinkReaderMockRecorder
	isgomock struct{}
}

// MockLinkReaderMockRecorder is the mock recorder for MockLinkReader.
type MockLinkReaderMockRecorder struct {
	mock *MockLinkReader
}

// NewMockLinkReader creates a new mock instance.
func NewMockLinkReader(ctrl *gomock.Controller) *MockLinkReader {
	mock := &MockLinkReader{ctrl: ctrl}
	mock.recorder = &MockLinkReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkReader) EXPECT() *MockLinkReaderMockRecorder {
	return m.recorder
}

// ReadLink mocks base method.
func (m *MockLinkReader) ReadLink() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLink")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLink indicates an expected call of ReadLink.
func (mr *MockLinkReaderMockRecorder) ReadLink() *MockLinkReaderReadLinkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLink", reflect.TypeOf((*MockLinkReader)(nil).ReadLink))
	return &MockLinkReaderReadLinkCall{Call: call}
}

// MockLinkReaderReadLinkCall wrap *gomock.Call
type MockLinkReaderReadLinkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLinkReaderReadLinkCall) Return(arg0 string, arg1 error) *MockLinkReaderReadLinkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLinkReaderReadLinkCall) Do(f func() (string, error)) *MockLinkReaderReadLinkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLinkReaderReadLinkCall) DoAndReturn(f func() (string, error)) *MockLinkReaderReadLinkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
	isgomock struct{}
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFileMockRecorder) Close() *MockFileCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFile)(nil).Close))
	return &MockFileCloseCall{Call: call}
}

// MockFileCloseCall wrap *gomock.Call
type MockFileCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileCloseCall) Return(arg0 error) *MockFileCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileCloseCall) Do(f func() error) *MockFileCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileCloseCall) DoAndReturn(f func() error) *MockFileCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockFile) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFileMockRecorder) Name() *MockFileNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFile)(nil).Name))
	return &MockFileNameCall{Call: call}
}

// MockFileNameCall wrap *gomock.Call
type MockFileNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileNameCall) Return(arg0 string) *MockFileNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileNameCall) Do(f func() string) *MockFileNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileNameCall) DoAndReturn(f func() string) *MockFileNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockFile) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileMockRecorder) Read(arg0 any) *MockFileReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFile)(nil).Read), arg0)
	return &MockFileReadCall{Call: call}
}

// MockFileReadCall wrap *gomock.Call
type MockFileReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileReadCall) Return(arg0 int, arg1 error) *MockFileReadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileReadCall) Do(f func([]byte) (int, error)) *MockFileReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileReadCall) DoAndReturn(f func([]byte) (int, error)) *MockFileReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAt mocks base method.
func (m *MockFile) ReadAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt.
func (mr *MockFileMockRecorder) ReadAt(p, off any) *MockFileReadAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockFile)(nil).ReadAt), p, off)
	return &MockFileReadAtCall{Call: call}
}

// MockFileReadAtCall wrap *gomock.Call
type MockFileReadAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileReadAtCall) Return(n int, err error) *MockFileReadAtCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileReadAtCall) Do(f func([]byte, int64) (int, error)) *MockFileReadAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileReadAtCall) DoAndReturn(f func([]byte, int64) (int, error)) *MockFileReadAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadDir mocks base method.
func (m *MockFile) ReadDir(n int) ([]fs0.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", n)
	ret0, _ := ret[0].([]fs0.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockFileMockRecorder) ReadDir(n any) *MockFileReadDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockFile)(nil).ReadDir), n)
	return &MockFileReadDirCall{Call: call}
}

// MockFileReadDirCall wrap *gomock.Call
type MockFileReadDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileReadDirCall) Return(arg0 []fs0.DirEntry, arg1 error) *MockFileReadDirCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileReadDirCall) Do(f func(int) ([]fs0.DirEntry, error)) *MockFileReadDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileReadDirCall) DoAndReturn(f func(int) ([]fs0.DirEntry, error)) *MockFileReadDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Seek mocks base method.
func (m *MockFile) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockFileMockRecorder) Seek(offset, whence any) *MockFileSeekCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockFile)(nil).Seek), offset, whence)
	return &MockFileSeekCall{Call: call}
}

// MockFileSeekCall wrap *gomock.Call
type MockFileSeekCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSeekCall) Return(arg0 int64, arg1 error) *MockFileSeekCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSeekCall) Do(f func(int64, int) (int64, error)) *MockFileSeekCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSeekCall) DoAndReturn(f func(int64, int) (int64, error)) *MockFileSeekCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stat mocks base method.
func (m *MockFile) Stat() (fs0.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(fs0.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFileMockRecorder) Stat() *MockFileStatCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFile)(nil).Stat))
	return &MockFileStatCall{Call: call}
}

// MockFileStatCall wrap *gomock.Call
type MockFileStatCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileStatCall) Return(arg0 fs0.FileInfo, arg1 error) *MockFileStatCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileStatCall) Do(f func() (fs0.FileInfo, error)) *MockFileStatCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileStatCall) DoAndReturn(f func() (fs0.FileInfo, error)) *MockFileStatCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockFile) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockFileMockRecorder) Write(p any) *MockFileWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFile)(nil).Write), p)
	return &MockFileWriteCall{Call: call}
}

// MockFileWriteCall wrap *gomock.Call
type MockFileWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileWriteCall) Return(n int, err error) *MockFileWriteCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileWriteCall) Do(f func([]byte) (int, error)) *MockFileWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockFileWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteAt mocks base method.
func (m *MockFile) WriteAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt.
func (mr *MockFileMockRecorder) WriteAt(p, off any) *MockFileWriteAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockFile)(nil).WriteAt), p, off)
	return &MockFileWriteAtCall{Call: call}
}

// MockFileWriteAtCall wrap *gomock.Call
type MockFileWriteAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileWriteAtCall) Return(n int, err error) *MockFileWriteAtCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileWriteAtCall) Do(f func([]byte, int64) (int, error)) *MockFileWriteAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileWriteAtCall) DoAndReturn(f func([]byte, int64) (int, error)) *MockFileWriteAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
