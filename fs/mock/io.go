// /*
// Copyright 2025 Flant JSC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by MockGen. DO NOT EDIT.
// Source: io (interfaces: Reader,Writer,ReaderAt,WriterAt,Seeker,ReadWriter,ReadCloser,WriteCloser,ReadWriteCloser,ReadSeeker,ReadSeekCloser,WriteSeeker,ReadWriteSeeker)
//
// Generated by this command:
//
//	mockgen -typed -package mock -copyright_file ../hack/boilerplate.txt -write_source_comment -destination=mock/io.go io Reader,Writer,ReaderAt,WriterAt,Seeker,ReadWriter,ReadCloser,WriteCloser,ReadWriteCloser,ReadSeeker,ReadSeekCloser,WriteSeeker,ReadWriteSeeker
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
	isgomock struct{}
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReader) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReaderMockRecorder) Read(p any) *MockReaderReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReader)(nil).Read), p)
	return &MockReaderReadCall{Call: call}
}

// MockReaderReadCall wrap *gomock.Call
type MockReaderReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReaderReadCall) Return(n int, err error) *MockReaderReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReaderReadCall) Do(f func([]byte) (int, error)) *MockReaderReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReaderReadCall) DoAndReturn(f func([]byte) (int, error)) *MockReaderReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
	isgomock struct{}
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockWriter) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockWriterMockRecorder) Write(p any) *MockWriterWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriter)(nil).Write), p)
	return &MockWriterWriteCall{Call: call}
}

// MockWriterWriteCall wrap *gomock.Call
type MockWriterWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWriterWriteCall) Return(n int, err error) *MockWriterWriteCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWriterWriteCall) Do(f func([]byte) (int, error)) *MockWriterWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWriterWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockWriterWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReaderAt is a mock of ReaderAt interface.
type MockReaderAt struct {
	ctrl     *gomock.Controller
	recorder *MockReaderAtMockRecorder
	isgomock struct{}
}

// MockReaderAtMockRecorder is the mock recorder for MockReaderAt.
type MockReaderAtMockRecorder struct {
	mock *MockReaderAt
}

// NewMockReaderAt creates a new mock instance.
func NewMockReaderAt(ctrl *gomock.Controller) *MockReaderAt {
	mock := &MockReaderAt{ctrl: ctrl}
	mock.recorder = &MockReaderAtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaderAt) EXPECT() *MockReaderAtMockRecorder {
	return m.recorder
}

// ReadAt mocks base method.
func (m *MockReaderAt) ReadAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt.
func (mr *MockReaderAtMockRecorder) ReadAt(p, off any) *MockReaderAtReadAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockReaderAt)(nil).ReadAt), p, off)
	return &MockReaderAtReadAtCall{Call: call}
}

// MockReaderAtReadAtCall wrap *gomock.Call
type MockReaderAtReadAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReaderAtReadAtCall) Return(n int, err error) *MockReaderAtReadAtCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReaderAtReadAtCall) Do(f func([]byte, int64) (int, error)) *MockReaderAtReadAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReaderAtReadAtCall) DoAndReturn(f func([]byte, int64) (int, error)) *MockReaderAtReadAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWriterAt is a mock of WriterAt interface.
type MockWriterAt struct {
	ctrl     *gomock.Controller
	recorder *MockWriterAtMockRecorder
	isgomock struct{}
}

// MockWriterAtMockRecorder is the mock recorder for MockWriterAt.
type MockWriterAtMockRecorder struct {
	mock *MockWriterAt
}

// NewMockWriterAt creates a new mock instance.
func NewMockWriterAt(ctrl *gomock.Controller) *MockWriterAt {
	mock := &MockWriterAt{ctrl: ctrl}
	mock.recorder = &MockWriterAtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriterAt) EXPECT() *MockWriterAtMockRecorder {
	return m.recorder
}

// WriteAt mocks base method.
func (m *MockWriterAt) WriteAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt.
func (mr *MockWriterAtMockRecorder) WriteAt(p, off any) *MockWriterAtWriteAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockWriterAt)(nil).WriteAt), p, off)
	return &MockWriterAtWriteAtCall{Call: call}
}

// MockWriterAtWriteAtCall wrap *gomock.Call
type MockWriterAtWriteAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWriterAtWriteAtCall) Return(n int, err error) *MockWriterAtWriteAtCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWriterAtWriteAtCall) Do(f func([]byte, int64) (int, error)) *MockWriterAtWriteAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWriterAtWriteAtCall) DoAndReturn(f func([]byte, int64) (int, error)) *MockWriterAtWriteAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSeeker is a mock of Seeker interface.
type MockSeeker struct {
	ctrl     *gomock.Controller
	recorder *MockSeekerMockRecorder
	isgomock struct{}
}

// MockSeekerMockRecorder is the mock recorder for MockSeeker.
type MockSeekerMockRecorder struct {
	mock *MockSeeker
}

// NewMockSeeker creates a new mock instance.
func NewMockSeeker(ctrl *gomock.Controller) *MockSeeker {
	mock := &MockSeeker{ctrl: ctrl}
	mock.recorder = &MockSeekerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeeker) EXPECT() *MockSeekerMockRecorder {
	return m.recorder
}

// Seek mocks base method.
func (m *MockSeeker) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockSeekerMockRecorder) Seek(offset, whence any) *MockSeekerSeekCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockSeeker)(nil).Seek), offset, whence)
	return &MockSeekerSeekCall{Call: call}
}

// MockSeekerSeekCall wrap *gomock.Call
type MockSeekerSeekCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSeekerSeekCall) Return(arg0 int64, arg1 error) *MockSeekerSeekCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSeekerSeekCall) Do(f func(int64, int) (int64, error)) *MockSeekerSeekCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSeekerSeekCall) DoAndReturn(f func(int64, int) (int64, error)) *MockSeekerSeekCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReadWriter is a mock of ReadWriter interface.
type MockReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockReadWriterMockRecorder
	isgomock struct{}
}

// MockReadWriterMockRecorder is the mock recorder for MockReadWriter.
type MockReadWriterMockRecorder struct {
	mock *MockReadWriter
}

// NewMockReadWriter creates a new mock instance.
func NewMockReadWriter(ctrl *gomock.Controller) *MockReadWriter {
	mock := &MockReadWriter{ctrl: ctrl}
	mock.recorder = &MockReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadWriter) EXPECT() *MockReadWriterMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReadWriter) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReadWriterMockRecorder) Read(p any) *MockReadWriterReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadWriter)(nil).Read), p)
	return &MockReadWriterReadCall{Call: call}
}

// MockReadWriterReadCall wrap *gomock.Call
type MockReadWriterReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadWriterReadCall) Return(n int, err error) *MockReadWriterReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadWriterReadCall) Do(f func([]byte) (int, error)) *MockReadWriterReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadWriterReadCall) DoAndReturn(f func([]byte) (int, error)) *MockReadWriterReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockReadWriter) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockReadWriterMockRecorder) Write(p any) *MockReadWriterWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockReadWriter)(nil).Write), p)
	return &MockReadWriterWriteCall{Call: call}
}

// MockReadWriterWriteCall wrap *gomock.Call
type MockReadWriterWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadWriterWriteCall) Return(n int, err error) *MockReadWriterWriteCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadWriterWriteCall) Do(f func([]byte) (int, error)) *MockReadWriterWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadWriterWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockReadWriterWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReadCloser is a mock of ReadCloser interface.
type MockReadCloser struct {
	ctrl     *gomock.Controller
	recorder *MockReadCloserMockRecorder
	isgomock struct{}
}

// MockReadCloserMockRecorder is the mock recorder for MockReadCloser.
type MockReadCloserMockRecorder struct {
	mock *MockReadCloser
}

// NewMockReadCloser creates a new mock instance.
func NewMockReadCloser(ctrl *gomock.Controller) *MockReadCloser {
	mock := &MockReadCloser{ctrl: ctrl}
	mock.recorder = &MockReadCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadCloser) EXPECT() *MockReadCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockReadCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReadCloserMockRecorder) Close() *MockReadCloserCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadCloser)(nil).Close))
	return &MockReadCloserCloseCall{Call: call}
}

// MockReadCloserCloseCall wrap *gomock.Call
type MockReadCloserCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadCloserCloseCall) Return(arg0 error) *MockReadCloserCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadCloserCloseCall) Do(f func() error) *MockReadCloserCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadCloserCloseCall) DoAndReturn(f func() error) *MockReadCloserCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockReadCloser) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReadCloserMockRecorder) Read(p any) *MockReadCloserReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadCloser)(nil).Read), p)
	return &MockReadCloserReadCall{Call: call}
}

// MockReadCloserReadCall wrap *gomock.Call
type MockReadCloserReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadCloserReadCall) Return(n int, err error) *MockReadCloserReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadCloserReadCall) Do(f func([]byte) (int, error)) *MockReadCloserReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadCloserReadCall) DoAndReturn(f func([]byte) (int, error)) *MockReadCloserReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWriteCloser is a mock of WriteCloser interface.
type MockWriteCloser struct {
	ctrl     *gomock.Controller
	recorder *MockWriteCloserMockRecorder
	isgomock struct{}
}

// MockWriteCloserMockRecorder is the mock recorder for MockWriteCloser.
type MockWriteCloserMockRecorder struct {
	mock *MockWriteCloser
}

// NewMockWriteCloser creates a new mock instance.
func NewMockWriteCloser(ctrl *gomock.Controller) *MockWriteCloser {
	mock := &MockWriteCloser{ctrl: ctrl}
	mock.recorder = &MockWriteCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteCloser) EXPECT() *MockWriteCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWriteCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWriteCloserMockRecorder) Close() *MockWriteCloserCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriteCloser)(nil).Close))
	return &MockWriteCloserCloseCall{Call: call}
}

// MockWriteCloserCloseCall wrap *gomock.Call
type MockWriteCloserCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWriteCloserCloseCall) Return(arg0 error) *MockWriteCloserCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWriteCloserCloseCall) Do(f func() error) *MockWriteCloserCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWriteCloserCloseCall) DoAndReturn(f func() error) *MockWriteCloserCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockWriteCloser) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockWriteCloserMockRecorder) Write(p any) *MockWriteCloserWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriteCloser)(nil).Write), p)
	return &MockWriteCloserWriteCall{Call: call}
}

// MockWriteCloserWriteCall wrap *gomock.Call
type MockWriteCloserWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWriteCloserWriteCall) Return(n int, err error) *MockWriteCloserWriteCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWriteCloserWriteCall) Do(f func([]byte) (int, error)) *MockWriteCloserWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWriteCloserWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockWriteCloserWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReadWriteCloser is a mock of ReadWriteCloser interface.
type MockReadWriteCloser struct {
	ctrl     *gomock.Controller
	recorder *MockReadWriteCloserMockRecorder
	isgomock struct{}
}

// MockReadWriteCloserMockRecorder is the mock recorder for MockReadWriteCloser.
type MockReadWriteCloserMockRecorder struct {
	mock *MockReadWriteCloser
}

// NewMockReadWriteCloser creates a new mock instance.
func NewMockReadWriteCloser(ctrl *gomock.Controller) *MockReadWriteCloser {
	mock := &MockReadWriteCloser{ctrl: ctrl}
	mock.recorder = &MockReadWriteCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadWriteCloser) EXPECT() *MockReadWriteCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockReadWriteCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReadWriteCloserMockRecorder) Close() *MockReadWriteCloserCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadWriteCloser)(nil).Close))
	return &MockReadWriteCloserCloseCall{Call: call}
}

// MockReadWriteCloserCloseCall wrap *gomock.Call
type MockReadWriteCloserCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadWriteCloserCloseCall) Return(arg0 error) *MockReadWriteCloserCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadWriteCloserCloseCall) Do(f func() error) *MockReadWriteCloserCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadWriteCloserCloseCall) DoAndReturn(f func() error) *MockReadWriteCloserCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockReadWriteCloser) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReadWriteCloserMockRecorder) Read(p any) *MockReadWriteCloserReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadWriteCloser)(nil).Read), p)
	return &MockReadWriteCloserReadCall{Call: call}
}

// MockReadWriteCloserReadCall wrap *gomock.Call
type MockReadWriteCloserReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadWriteCloserReadCall) Return(n int, err error) *MockReadWriteCloserReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadWriteCloserReadCall) Do(f func([]byte) (int, error)) *MockReadWriteCloserReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadWriteCloserReadCall) DoAndReturn(f func([]byte) (int, error)) *MockReadWriteCloserReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockReadWriteCloser) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockReadWriteCloserMockRecorder) Write(p any) *MockReadWriteCloserWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockReadWriteCloser)(nil).Write), p)
	return &MockReadWriteCloserWriteCall{Call: call}
}

// MockReadWriteCloserWriteCall wrap *gomock.Call
type MockReadWriteCloserWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadWriteCloserWriteCall) Return(n int, err error) *MockReadWriteCloserWriteCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadWriteCloserWriteCall) Do(f func([]byte) (int, error)) *MockReadWriteCloserWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadWriteCloserWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockReadWriteCloserWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReadSeeker is a mock of ReadSeeker interface.
type MockReadSeeker struct {
	ctrl     *gomock.Controller
	recorder *MockReadSeekerMockRecorder
	isgomock struct{}
}

// MockReadSeekerMockRecorder is the mock recorder for MockReadSeeker.
type MockReadSeekerMockRecorder struct {
	mock *MockReadSeeker
}

// NewMockReadSeeker creates a new mock instance.
func NewMockReadSeeker(ctrl *gomock.Controller) *MockReadSeeker {
	mock := &MockReadSeeker{ctrl: ctrl}
	mock.recorder = &MockReadSeekerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadSeeker) EXPECT() *MockReadSeekerMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReadSeeker) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReadSeekerMockRecorder) Read(p any) *MockReadSeekerReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadSeeker)(nil).Read), p)
	return &MockReadSeekerReadCall{Call: call}
}

// MockReadSeekerReadCall wrap *gomock.Call
type MockReadSeekerReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadSeekerReadCall) Return(n int, err error) *MockReadSeekerReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadSeekerReadCall) Do(f func([]byte) (int, error)) *MockReadSeekerReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadSeekerReadCall) DoAndReturn(f func([]byte) (int, error)) *MockReadSeekerReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Seek mocks base method.
func (m *MockReadSeeker) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockReadSeekerMockRecorder) Seek(offset, whence any) *MockReadSeekerSeekCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockReadSeeker)(nil).Seek), offset, whence)
	return &MockReadSeekerSeekCall{Call: call}
}

// MockReadSeekerSeekCall wrap *gomock.Call
type MockReadSeekerSeekCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadSeekerSeekCall) Return(arg0 int64, arg1 error) *MockReadSeekerSeekCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadSeekerSeekCall) Do(f func(int64, int) (int64, error)) *MockReadSeekerSeekCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadSeekerSeekCall) DoAndReturn(f func(int64, int) (int64, error)) *MockReadSeekerSeekCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReadSeekCloser is a mock of ReadSeekCloser interface.
type MockReadSeekCloser struct {
	ctrl     *gomock.Controller
	recorder *MockReadSeekCloserMockRecorder
	isgomock struct{}
}

// MockReadSeekCloserMockRecorder is the mock recorder for MockReadSeekCloser.
type MockReadSeekCloserMockRecorder struct {
	mock *MockReadSeekCloser
}

// NewMockReadSeekCloser creates a new mock instance.
func NewMockReadSeekCloser(ctrl *gomock.Controller) *MockReadSeekCloser {
	mock := &MockReadSeekCloser{ctrl: ctrl}
	mock.recorder = &MockReadSeekCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadSeekCloser) EXPECT() *MockReadSeekCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockReadSeekCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReadSeekCloserMockRecorder) Close() *MockReadSeekCloserCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadSeekCloser)(nil).Close))
	return &MockReadSeekCloserCloseCall{Call: call}
}

// MockReadSeekCloserCloseCall wrap *gomock.Call
type MockReadSeekCloserCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadSeekCloserCloseCall) Return(arg0 error) *MockReadSeekCloserCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadSeekCloserCloseCall) Do(f func() error) *MockReadSeekCloserCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadSeekCloserCloseCall) DoAndReturn(f func() error) *MockReadSeekCloserCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockReadSeekCloser) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReadSeekCloserMockRecorder) Read(p any) *MockReadSeekCloserReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadSeekCloser)(nil).Read), p)
	return &MockReadSeekCloserReadCall{Call: call}
}

// MockReadSeekCloserReadCall wrap *gomock.Call
type MockReadSeekCloserReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadSeekCloserReadCall) Return(n int, err error) *MockReadSeekCloserReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadSeekCloserReadCall) Do(f func([]byte) (int, error)) *MockReadSeekCloserReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadSeekCloserReadCall) DoAndReturn(f func([]byte) (int, error)) *MockReadSeekCloserReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Seek mocks base method.
func (m *MockReadSeekCloser) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockReadSeekCloserMockRecorder) Seek(offset, whence any) *MockReadSeekCloserSeekCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockReadSeekCloser)(nil).Seek), offset, whence)
	return &MockReadSeekCloserSeekCall{Call: call}
}

// MockReadSeekCloserSeekCall wrap *gomock.Call
type MockReadSeekCloserSeekCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadSeekCloserSeekCall) Return(arg0 int64, arg1 error) *MockReadSeekCloserSeekCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadSeekCloserSeekCall) Do(f func(int64, int) (int64, error)) *MockReadSeekCloserSeekCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadSeekCloserSeekCall) DoAndReturn(f func(int64, int) (int64, error)) *MockReadSeekCloserSeekCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWriteSeeker is a mock of WriteSeeker interface.
type MockWriteSeeker struct {
	ctrl     *gomock.Controller
	recorder *MockWriteSeekerMockRecorder
	isgomock struct{}
}

// MockWriteSeekerMockRecorder is the mock recorder for MockWriteSeeker.
type MockWriteSeekerMockRecorder struct {
	mock *MockWriteSeeker
}

// NewMockWriteSeeker creates a new mock instance.
func NewMockWriteSeeker(ctrl *gomock.Controller) *MockWriteSeeker {
	mock := &MockWriteSeeker{ctrl: ctrl}
	mock.recorder = &MockWriteSeekerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteSeeker) EXPECT() *MockWriteSeekerMockRecorder {
	return m.recorder
}

// Seek mocks base method.
func (m *MockWriteSeeker) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockWriteSeekerMockRecorder) Seek(offset, whence any) *MockWriteSeekerSeekCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockWriteSeeker)(nil).Seek), offset, whence)
	return &MockWriteSeekerSeekCall{Call: call}
}

// MockWriteSeekerSeekCall wrap *gomock.Call
type MockWriteSeekerSeekCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWriteSeekerSeekCall) Return(arg0 int64, arg1 error) *MockWriteSeekerSeekCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWriteSeekerSeekCall) Do(f func(int64, int) (int64, error)) *MockWriteSeekerSeekCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWriteSeekerSeekCall) DoAndReturn(f func(int64, int) (int64, error)) *MockWriteSeekerSeekCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockWriteSeeker) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockWriteSeekerMockRecorder) Write(p any) *MockWriteSeekerWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriteSeeker)(nil).Write), p)
	return &MockWriteSeekerWriteCall{Call: call}
}

// MockWriteSeekerWriteCall wrap *gomock.Call
type MockWriteSeekerWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWriteSeekerWriteCall) Return(n int, err error) *MockWriteSeekerWriteCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWriteSeekerWriteCall) Do(f func([]byte) (int, error)) *MockWriteSeekerWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWriteSeekerWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockWriteSeekerWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReadWriteSeeker is a mock of ReadWriteSeeker interface.
type MockReadWriteSeeker struct {
	ctrl     *gomock.Controller
	recorder *MockReadWriteSeekerMockRecorder
	isgomock struct{}
}

// MockReadWriteSeekerMockRecorder is the mock recorder for MockReadWriteSeeker.
type MockReadWriteSeekerMockRecorder struct {
	mock *MockReadWriteSeeker
}

// NewMockReadWriteSeeker creates a new mock instance.
func NewMockReadWriteSeeker(ctrl *gomock.Controller) *MockReadWriteSeeker {
	mock := &MockReadWriteSeeker{ctrl: ctrl}
	mock.recorder = &MockReadWriteSeekerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadWriteSeeker) EXPECT() *MockReadWriteSeekerMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReadWriteSeeker) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReadWriteSeekerMockRecorder) Read(p any) *MockReadWriteSeekerReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadWriteSeeker)(nil).Read), p)
	return &MockReadWriteSeekerReadCall{Call: call}
}

// MockReadWriteSeekerReadCall wrap *gomock.Call
type MockReadWriteSeekerReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadWriteSeekerReadCall) Return(n int, err error) *MockReadWriteSeekerReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadWriteSeekerReadCall) Do(f func([]byte) (int, error)) *MockReadWriteSeekerReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadWriteSeekerReadCall) DoAndReturn(f func([]byte) (int, error)) *MockReadWriteSeekerReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Seek mocks base method.
func (m *MockReadWriteSeeker) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockReadWriteSeekerMockRecorder) Seek(offset, whence any) *MockReadWriteSeekerSeekCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockReadWriteSeeker)(nil).Seek), offset, whence)
	return &MockReadWriteSeekerSeekCall{Call: call}
}

// MockReadWriteSeekerSeekCall wrap *gomock.Call
type MockReadWriteSeekerSeekCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadWriteSeekerSeekCall) Return(arg0 int64, arg1 error) *MockReadWriteSeekerSeekCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadWriteSeekerSeekCall) Do(f func(int64, int) (int64, error)) *MockReadWriteSeekerSeekCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadWriteSeekerSeekCall) DoAndReturn(f func(int64, int) (int64, error)) *MockReadWriteSeekerSeekCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockReadWriteSeeker) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockReadWriteSeekerMockRecorder) Write(p any) *MockReadWriteSeekerWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockReadWriteSeeker)(nil).Write), p)
	return &MockReadWriteSeekerWriteCall{Call: call}
}

// MockReadWriteSeekerWriteCall wrap *gomock.Call
type MockReadWriteSeekerWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadWriteSeekerWriteCall) Return(n int, err error) *MockReadWriteSeekerWriteCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadWriteSeekerWriteCall) Do(f func([]byte) (int, error)) *MockReadWriteSeekerWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadWriteSeekerWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockReadWriteSeekerWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
